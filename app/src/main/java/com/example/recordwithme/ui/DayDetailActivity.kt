package com.example.recordwithme.ui

import android.graphics.BitmapFactory
import android.graphics.Color
import android.os.Build
import android.os.Bundle
import android.util.Base64
import android.view.Gravity
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import android.graphics.Rect
import android.widget.EditText
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import com.google.firebase.auth.FirebaseAuth
import android.app.AlertDialog
import android.content.Intent
import android.net.Uri
import java.io.InputStream
import com.google.firebase.Timestamp
import androidx.security.crypto.EncryptedSharedPreferences
import androidx.security.crypto.MasterKeys
import java.net.URL
import java.net.HttpURLConnection
import org.json.JSONObject
import org.json.JSONArray
import android.widget.FrameLayout
import android.widget.RelativeLayout
import android.media.MediaPlayer
import android.widget.ImageButton
import android.util.Log
import com.example.recordwithme.BuildConfig

// ÏÇ¨ÏßÑ Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§
data class Comment(
    val userId: String = "",
    val text: String = ""
)

data class PhotoData(
    val url: String,
    val isBase64: Boolean,
    val description: String = "",
    val comments: List<Comment> = emptyList()
)

// PhotoAdapter ÏàòÏ†ï: Îã§Ï§ë Î∑∞ÌÉÄÏûÖ ÏßÄÏõê
class PhotoAdapter(
    private val dateString: String,
    private val photoCount: Int,
    private val photos: List<PhotoData>,
    private val groupId: String,
    private val photoDocIds: List<String>,
    private val onRefresh: () -> Unit
) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {
    companion object {
        private const val VIEW_TYPE_DATE = 0
        private const val VIEW_TYPE_COUNT = 1
        private const val VIEW_TYPE_PHOTO = 2
    }

    // ÌòÑÏû¨ Ïû¨ÏÉù Ï§ëÏù∏ MediaPlayer
    private var currentMediaPlayer: MediaPlayer? = null
    private var currentPlayingPosition: Int = -1

    // ÎÇ†Ïßú Î∑∞ÌôÄÎçî
    class DateViewHolder(val textView: TextView) : RecyclerView.ViewHolder(textView)
    // ÏÇ¨ÏßÑ Í∞úÏàò Î∑∞ÌôÄÎçî
    class CountViewHolder(val textView: TextView) : RecyclerView.ViewHolder(textView)
    // ÏÇ¨ÏßÑ Î∑∞ÌôÄÎçî(Í∏∞Ï°¥)
    class PhotoViewHolder(
        val imageView: ImageView,
        val descView: TextView,
        val commentsView: LinearLayout,
        val commentInput: EditText,
        val commentButton: Button,
        val deleteButton: Button,
        val labelButton: Button,
        val musicOverlay: RelativeLayout,
        val playButton: ImageButton,
        itemView: View
    ) : RecyclerView.ViewHolder(itemView)

    override fun getItemViewType(position: Int): Int {
        return when (position) {
            0 -> VIEW_TYPE_DATE
            1 -> VIEW_TYPE_COUNT
            else -> VIEW_TYPE_PHOTO
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        val context = parent.context
        return when (viewType) {
            VIEW_TYPE_DATE -> {
                val tv = TextView(context).apply {
                    textSize = 36f
                    gravity = Gravity.CENTER
                    setTextColor(Color.BLACK)
                    setPadding(0, 0, 0, 32)
                }
                DateViewHolder(tv)
            }
            VIEW_TYPE_COUNT -> {
                val tv = TextView(context).apply {
                    textSize = 18f
                    gravity = Gravity.CENTER
                    setTextColor(Color.GRAY)
                    setPadding(0, 0, 0, 32)
                }
                CountViewHolder(tv)
            }
            else -> {
                // Í∏∞Ï°¥ PhotoViewHolder ÏÉùÏÑ± ÏΩîÎìú
                val container = FrameLayout(context).apply {
                    setBackgroundColor(Color.WHITE)
                    val padding = 32
                    setPadding(padding, padding, padding, padding)
                    val params = ViewGroup.MarginLayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT,
                        ViewGroup.LayoutParams.WRAP_CONTENT
                    )
                    params.bottomMargin = 32
                    layoutParams = params
                }
                
                // ÎÇ¥Î∂Ä Ïª®ÌÖåÏù¥ÎÑà (Í∏∞Ï°¥ LinearLayout)
                val innerContainer = LinearLayout(context).apply {
                    orientation = LinearLayout.VERTICAL
                    layoutParams = FrameLayout.LayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT,
                        ViewGroup.LayoutParams.WRAP_CONTENT
                    )
                }
                
                val imageView = ImageView(context).apply {
                    layoutParams = ViewGroup.LayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT,
                        ViewGroup.LayoutParams.WRAP_CONTENT
                    )
                    scaleType = ImageView.ScaleType.FIT_CENTER
                    adjustViewBounds = true
                }
                
                // ÏùåÏïÖ Ï†ïÎ≥¥ Ïò§Î≤ÑÎ†àÏù¥ (Ï≤òÏùåÏóêÎäî Ïà®ÍπÄ)
                val musicOverlay = RelativeLayout(context).apply {
                    layoutParams = FrameLayout.LayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT,
                        ViewGroup.LayoutParams.WRAP_CONTENT
                    )
                    setBackgroundColor(Color.parseColor("#80000000")) // Î∞òÌà¨Î™Ö Í≤ÄÏ†ï
                    visibility = View.GONE
                    
                    val musicText = TextView(context).apply {
                        text = "üéµ ÏùåÏïÖÏùÑ Ï∞æÎäî Ï§ë..."
                        setTextColor(Color.WHITE)
                        textSize = 16f
                        setPadding(16, 12, 16, 12)
                        layoutParams = RelativeLayout.LayoutParams(
                            ViewGroup.LayoutParams.WRAP_CONTENT,
                            ViewGroup.LayoutParams.WRAP_CONTENT
                        ).apply {
                            addRule(RelativeLayout.CENTER_IN_PARENT)
                        }
                    }
                    addView(musicText)
                    
                    // Ïû¨ÏÉù/Ï†ïÏßÄ Î≤ÑÌäº
                    val playButton = ImageButton(context).apply {
                        setImageResource(android.R.drawable.ic_media_play)
                        setBackgroundColor(Color.TRANSPARENT)
                        setColorFilter(Color.WHITE)
                        layoutParams = RelativeLayout.LayoutParams(
                            ViewGroup.LayoutParams.WRAP_CONTENT,
                            ViewGroup.LayoutParams.WRAP_CONTENT
                        ).apply {
                            addRule(RelativeLayout.ALIGN_PARENT_RIGHT)
                            addRule(RelativeLayout.CENTER_VERTICAL)
                            rightMargin = 16
                        }
                    }
                    addView(playButton)
                }
                
                val descView = TextView(context).apply {
                    setTextColor(Color.DKGRAY)
                    textSize = 15f
                    setPadding(0, 16, 0, 16)
                }
                val divider = View(context).apply {
                    setBackgroundColor(Color.LTGRAY)
                    layoutParams = ViewGroup.LayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT,
                        2
                    )
                }
                val commentsView = LinearLayout(context).apply {
                    orientation = LinearLayout.VERTICAL
                    setPadding(0, 8, 0, 8)
                }
                val commentInput = EditText(context).apply {
                    hint = "ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    textSize = 13f
                }
                val commentButton = Button(context).apply {
                    text = "Îì±Î°ù"
                    textSize = 13f
                    setBackgroundColor(Color.BLACK)
                    setTextColor(Color.WHITE)
                }
                val deleteButton = Button(context).apply {
                    text = "ÏÇ≠Ï†ú"
                    textSize = 13f
                    setBackgroundColor(Color.BLACK)
                    setTextColor(Color.WHITE)
                }
                val labelButton = Button(context).apply {
                    text = "Ïñ¥Ïö∏Î¶¨Îäî ÏùåÏïÖ Ïû¨ÏÉù"
                    textSize = 13f
                    setBackgroundColor(Color.parseColor("#1976D2"))
                    setTextColor(Color.WHITE)
                }
                val deleteParams = LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT
                )
                deleteParams.topMargin = 12
                deleteButton.layoutParams = deleteParams
                innerContainer.addView(imageView)
                innerContainer.addView(descView)
                innerContainer.addView(divider)
                innerContainer.addView(commentsView)
                innerContainer.addView(commentInput)
                innerContainer.addView(commentButton)
                innerContainer.addView(deleteButton)
                innerContainer.addView(labelButton)
                
                container.addView(innerContainer)
                container.addView(musicOverlay)
                
                PhotoViewHolder(imageView, descView, commentsView, commentInput, commentButton, deleteButton, labelButton, musicOverlay, musicOverlay.getChildAt(1) as ImageButton, container)
            }
        }
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        when (getItemViewType(position)) {
            VIEW_TYPE_DATE -> {
                (holder as DateViewHolder).textView.text = dateString
            }
            VIEW_TYPE_COUNT -> {
                (holder as CountViewHolder).textView.text = "Ïù¥ ÎÇ†Ïùò ÏÇ¨ÏßÑ: ${photoCount}Ïû•"
                holder.textView.setTextColor(if (photoCount == 0) Color.GRAY else Color.BLUE)
            }
            VIEW_TYPE_PHOTO -> {
                val photoIdx = position - 2
                val photo = photos[photoIdx]
                val photoHolder = holder as PhotoViewHolder
                // Ïù¥Ìïò Í∏∞Ï°¥ PhotoAdapterÏùò onBindViewHolder ÎÇ¥Ïö©ÏóêÏÑú position -> photoIdxÎ°ú Î≥ÄÍ≤Ω
                if (photo.isBase64) {
                    try {
                        val bytes = Base64.decode(photo.url, Base64.DEFAULT)
                        val bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
                        photoHolder.imageView.setImageBitmap(bitmap)
                    } catch (e: Exception) {
                        photoHolder.imageView.setImageResource(android.R.drawable.ic_menu_gallery)
                    }
                } else if (photo.url.startsWith("https://")) {
                    photoHolder.imageView.setImageResource(android.R.drawable.ic_menu_gallery)
                }
                photoHolder.descView.text = if (photo.description.isBlank()) "+ÏÑ§Î™Ö" else photo.description
                photoHolder.descView.setTextColor(
                    if (photo.description.isBlank()) Color.parseColor("#1976D2") else Color.DKGRAY
                )
                photoHolder.descView.setOnClickListener {
                    val editText = EditText(photoHolder.descView.context).apply {
                        setText(photo.description)
                        hint = "ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    }
                    AlertDialog.Builder(photoHolder.descView.context)
                        .setTitle(if (photo.description.isBlank()) "ÏÑ§Î™Ö Ï∂îÍ∞Ä" else "ÏÑ§Î™Ö ÏàòÏ†ï")
                        .setView(editText)
                        .setPositiveButton("Ï†ÄÏû•") { _, _ ->
                            val newDesc = editText.text.toString().trim()
                            if (newDesc.isNotEmpty() && newDesc != photo.description) {
                                val firestore = FirebaseFirestore.getInstance()
                                val photoId = photoDocIds[photoIdx]
                                val photoDocRef = firestore.collection("groups")
                                    .document(groupId)
                                    .collection("photos")
                                    .document(photoId)
                                photoDocRef.update("description", newDesc)
                                    .addOnSuccessListener { onRefresh() }
                            }
                        }
                        .setNegativeButton("Ï∑®ÏÜå", null)
                        .show()
                }
                photoHolder.commentsView.removeAllViews()
                if (photo.comments.isEmpty()) {
                    val emptyView = TextView(photoHolder.commentsView.context).apply {
                        text = "ÎåìÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§"
                        setTextColor(Color.LTGRAY)
                        textSize = 12f
                    }
                    photoHolder.commentsView.addView(emptyView)
                } else {
                    for (comment in photo.comments) {
                        val commentView = TextView(photoHolder.commentsView.context).apply {
                            text = "${comment.userId} : ${comment.text}"
                            setTextColor(Color.GRAY)
                            textSize = 13f
                            setPadding(0, 4, 0, 4)
                        }
                        photoHolder.commentsView.addView(commentView)
                    }
                }
                photoHolder.commentButton.setOnClickListener {
                    val newCommentText = photoHolder.commentInput.text.toString().trim()
                    if (newCommentText.isNotEmpty()) {
                        val uid = FirebaseAuth.getInstance().currentUser?.uid
                        if (uid != null) {
                            val usersRef = FirebaseFirestore.getInstance().collection("users")
                            usersRef.document(uid).get().addOnSuccessListener { document ->
                                val userName = document.getString("name") ?: "ÏùµÎ™Ö"
                                val firestore = FirebaseFirestore.getInstance()
                                val photoId = photoDocIds[photoIdx]
                                val photoDocRef = firestore.collection("groups")
                                    .document(groupId)
                                    .collection("photos")
                                    .document(photoId)
                                val commentMap = mapOf("userId" to userName, "text" to newCommentText)
                                photoDocRef.update("comments", com.google.firebase.firestore.FieldValue.arrayUnion(commentMap))
                                    .addOnSuccessListener {
                                        photoHolder.commentInput.setText("")
                                        onRefresh()
                                    }
                            }
                        }
                    }
                }
                val context = photoHolder.itemView.context
                val photoId = photoDocIds[photoIdx]
                (photoHolder.itemView as ViewGroup).findViewWithTag<Button>("deleteButton")?.setOnClickListener(null)
                (photoHolder.itemView as ViewGroup).getChildAt((photoHolder.itemView as ViewGroup).childCount - 1).setOnClickListener {
                    AlertDialog.Builder(context)
                        .setTitle("ÏÇ¨ÏßÑ ÏÇ≠Ï†ú")
                        .setMessage("Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")
                        .setPositiveButton("ÏÇ≠Ï†ú") { _, _ ->
                            val firestore = FirebaseFirestore.getInstance()
                            firestore.collection("groups")
                                .document(groupId)
                                .collection("photos")
                                .document(photoId)
                                .delete()
                                .addOnSuccessListener { onRefresh() }
                        }
                        .setNegativeButton("Ï∑®ÏÜå", null)
                        .show()
                }
                // ÎùºÎ≤® Ï∂îÏ∂ú Î≤ÑÌäº ÌÅ¥Î¶≠ Î¶¨Ïä§ÎÑà
                photoHolder.labelButton.setOnClickListener {
                    CoroutineScope(Dispatchers.IO).launch {
                        try {
                            // ÏùåÏïÖ Ïò§Î≤ÑÎ†àÏù¥ ÌëúÏãú
                            (photoHolder.itemView.context as? android.app.Activity)?.runOnUiThread {
                                photoHolder.musicOverlay.visibility = View.VISIBLE
                                val musicText = photoHolder.musicOverlay.getChildAt(0) as TextView
                                musicText.text = "üéµ ÏùåÏïÖÏùÑ Ï∞æÎäî Ï§ë..."
                            }
                            
                            // 1. Vision APIÎ°ú ÎùºÎ≤® Ï∂îÏ∂ú
                            // TODO: .envÏóêÏÑú Vision API ÌÇ§Î•º Î∂àÎü¨Ïò§ÎèÑÎ°ù Î≥ÄÍ≤Ω
                            val visionApiKey = BuildConfig.VISION_API_KEY
                            val labels = com.example.recordwithme.util.VisionApiHelper.getLabelsFromVisionApi(
                                photo.url, // Base64 Îç∞Ïù¥ÌÑ∞
                                visionApiKey
                            )
                            Log.d("SpotifyDebug", "Vision ÎùºÎ≤®: $labels")
                            
                            if (labels.isNotEmpty()) {
                                // 2. Ï†ÄÏû•Îêú Spotify Access Token Í∞ÄÏ†∏Ïò§Í∏∞
                                val masterKeyAlias = MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC)
                                val prefs = EncryptedSharedPreferences.create(
                                    "spotify_prefs",
                                    masterKeyAlias,
                                    photoHolder.itemView.context,
                                    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                                    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
                                )
                                val accessToken = prefs.getString("access_token", null)
                                
                                if (accessToken != null) {
                                    // 3. Spotify APIÎ°ú ÏùåÏïÖ Í≤ÄÏÉâ
                                    val searchQuery = labels.take(3).joinToString(" ") // ÏÉÅÏúÑ 3Í∞ú ÎùºÎ≤®Î°ú Í≤ÄÏÉâ
                                    val tracks = searchSpotifyTracks(searchQuery, accessToken)
                                    Log.d("SpotifyDebug", "Í≤ÄÏÉâ ÏøºÎ¶¨: $searchQuery, Ìä∏Îûô Ïàò: ${tracks.size}")
                                    if (tracks.isNotEmpty()) {
                                        Log.d("SpotifyDebug", "Ï≤´ Í≥°: ${tracks[0].name}, previewUrl: ${tracks[0].previewUrl}")
                                        // 4. Ï≤´ Î≤àÏß∏ Ìä∏Îûô Ï†ïÎ≥¥Î•º Ïò§Î≤ÑÎ†àÏù¥Ïóê ÌëúÏãú
                                        val firstTrack = tracks[0]
                                        (photoHolder.itemView.context as? android.app.Activity)?.runOnUiThread {
                                            val musicText = photoHolder.musicOverlay.getChildAt(0) as TextView
                                            musicText.text = "üéµ ${firstTrack.name} - ${firstTrack.artist}"
                                            
                                            // Ïû¨ÏÉù Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Preview URL Ïû¨ÏÉù
                                            val playButton = photoHolder.musicOverlay.getChildAt(1) as ImageButton
                                            playButton.setOnClickListener {
                                                playPreviewUrl(firstTrack.previewUrl, photoHolder, photoIdx)
                                            }
                                            
                                            // Track Ï†ïÎ≥¥Î•º ViewHolderÏóê Ï†ÄÏû• (ÎÇòÏ§ëÏóê ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï¥)
                                            photoHolder.itemView.tag = firstTrack
                                        }
                                    } else {
                                        (photoHolder.itemView.context as? android.app.Activity)?.runOnUiThread {
                                            photoHolder.musicOverlay.visibility = View.GONE
                                            android.widget.Toast.makeText(
                                                photoHolder.itemView.context,
                                                "Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.",
                                                android.widget.Toast.LENGTH_LONG
                                            ).show()
                                        }
                                    }
                                } else {
                                    (photoHolder.itemView.context as? android.app.Activity)?.runOnUiThread {
                                        photoHolder.musicOverlay.visibility = View.GONE
                                        android.widget.Toast.makeText(
                                            photoHolder.itemView.context,
                                            "Spotify Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.",
                                            android.widget.Toast.LENGTH_LONG
                                        ).show()
                                    }
                                }
                            } else {
                                (photoHolder.itemView.context as? android.app.Activity)?.runOnUiThread {
                                    photoHolder.musicOverlay.visibility = View.GONE
                                    android.widget.Toast.makeText(
                                        photoHolder.itemView.context,
                                        "ÎùºÎ≤®ÏùÑ Ï∂îÏ∂úÌï† Ïàò ÏóÜÏäµÎãàÎã§.",
                                        android.widget.Toast.LENGTH_LONG
                                    ).show()
                                }
                            }
                        } catch (e: Exception) {
                            (photoHolder.itemView.context as? android.app.Activity)?.runOnUiThread {
                                photoHolder.musicOverlay.visibility = View.GONE
                                android.widget.Toast.makeText(
                                    photoHolder.itemView.context,
                                    "Ïò§Î•ò: ${e.message}",
                                    android.widget.Toast.LENGTH_LONG
                                ).show()
                            }
                        }
                    }
                }
            }
        }
    }

    override fun getItemCount(): Int = 2 + photos.size

    // Preview URL Ïû¨ÏÉù Ìï®Ïàò
    private fun playPreviewUrl(previewUrl: String?, photoHolder: PhotoViewHolder, photoIdx: Int) {
        Log.d("SpotifyDebug", "playPreviewUrl ÏßÑÏûÖ, previewUrl: $previewUrl")
        if (previewUrl == null) {
            // Preview URLÏù¥ ÏóÜÏúºÎ©¥ Spotify Ïï±ÏúºÎ°ú Ïù¥Îèô
            val track = photoHolder.itemView.tag as? Track
            if (track != null) {
                val spotifyUri = "spotify:track:${track.id}"
                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(spotifyUri))
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                try {
                    photoHolder.itemView.context.startActivity(intent)
                } catch (e: Exception) {
                    android.widget.Toast.makeText(
                        photoHolder.itemView.context,
                        "Spotify Ïï±Ïù¥ ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.",
                        android.widget.Toast.LENGTH_LONG
                    ).show()
                }
            }
            return
        }
        
        // Ïù¥Ï†Ñ Ïû¨ÏÉù Ï§ëÏù∏ ÏùåÏïÖ Ï†ïÏßÄ
        stopCurrentMusic()
        
        try {
            currentMediaPlayer = MediaPlayer().apply {
                // Ïò§ÎîîÏò§ Ïä§Ìä∏Î¶º ÌÉÄÏûÖ ÏÑ§Ï†ï (ÎØ∏ÎîîÏñ¥ Î≥ºÎ•®)
                setAudioStreamType(android.media.AudioManager.STREAM_MUSIC)
                
                // Î≥ºÎ•® ÏÑ§Ï†ï (ÏµúÎåÄ Î≥ºÎ•®Ïùò 80%)
                val audioManager = photoHolder.itemView.context.getSystemService(android.content.Context.AUDIO_SERVICE) as android.media.AudioManager
                val maxVolume = audioManager.getStreamMaxVolume(android.media.AudioManager.STREAM_MUSIC)
                val targetVolume = (maxVolume * 0.8).toInt()
                audioManager.setStreamVolume(android.media.AudioManager.STREAM_MUSIC, targetVolume, 0)
                
                setDataSource(previewUrl)
                prepareAsync()
                setOnPreparedListener { player ->
                    Log.d("SpotifyDebug", "MediaPlayer Ï§ÄÎπÑ ÏôÑÎ£å, Ïû¨ÏÉù ÏãúÏûë")
                    player.start()
                    currentPlayingPosition = photoIdx
                    
                    // Ïû¨ÏÉù Î≤ÑÌäºÏùÑ Ï†ïÏßÄ Î≤ÑÌäºÏúºÎ°ú Î≥ÄÍ≤Ω
                    val playButton = photoHolder.musicOverlay.getChildAt(1) as ImageButton
                    playButton.setImageResource(android.R.drawable.ic_media_pause)
                    
                    android.widget.Toast.makeText(
                        photoHolder.itemView.context,
                        "üéµ 30Ï¥à ÎØ∏Î¶¨Îì£Í∏∞ Ïû¨ÏÉù Ï§ë...",
                        android.widget.Toast.LENGTH_SHORT
                    ).show()
                }
                setOnCompletionListener { player ->
                    // Ïû¨ÏÉù ÏôÑÎ£å Ïãú Ïû¨ÏÉù Î≤ÑÌäºÏúºÎ°ú Î≥ÄÍ≤Ω
                    val playButton = photoHolder.musicOverlay.getChildAt(1) as ImageButton
                    playButton.setImageResource(android.R.drawable.ic_media_play)
                    currentPlayingPosition = -1
                }
                setOnErrorListener { _, what, extra ->
                    Log.e("SpotifyDebug", "MediaPlayer ÏóêÎü¨ Î∞úÏÉù what=$what, extra=$extra")
                    android.widget.Toast.makeText(
                        photoHolder.itemView.context,
                        "Ïû¨ÏÉù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. (ÏΩîÎìú: $what, $extra)",
                        android.widget.Toast.LENGTH_SHORT
                    ).show()
                    val playButton = photoHolder.musicOverlay.getChildAt(1) as ImageButton
                    playButton.setImageResource(android.R.drawable.ic_media_play)
                    currentPlayingPosition = -1
                    true
                }
            }
        } catch (e: Exception) {
            Log.e("SpotifyDebug", "MediaPlayer ÏòàÏô∏: ${e.message}")
            android.widget.Toast.makeText(
                photoHolder.itemView.context,
                "Ïû¨ÏÉù Ï§ÄÎπÑ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${e.message}",
                android.widget.Toast.LENGTH_SHORT
            ).show()
        }
        
        Log.d("SpotifyPreview", "ÎØ∏Î¶¨Îì£Í∏∞ URL: $previewUrl")
    }
    
    // ÌòÑÏû¨ Ïû¨ÏÉù Ï§ëÏù∏ ÏùåÏïÖ Ï†ïÏßÄ
    private fun stopCurrentMusic() {
        currentMediaPlayer?.let { player ->
            if (player.isPlaying) {
                player.stop()
            }
            player.release()
        }
        currentMediaPlayer = null
        currentPlayingPosition = -1
    }
    
    // Adapter ÏÜåÎ©∏ Ïãú MediaPlayer Ï†ïÎ¶¨
    fun cleanup() {
        stopCurrentMusic()
    }
}

class DayDetailActivity : AppCompatActivity() {
    private lateinit var galleryLauncher: androidx.activity.result.ActivityResultLauncher<Intent>
    private var selectedImageUri: Uri? = null
    private var groupId: String = ""
    private var year: Int = -1
    private var month: Int = -1
    private var day: Int = -1
    private var groupName: String = ""
    private lateinit var loadPhotosFunc: () -> Unit
    private var photoAdapter: PhotoAdapter? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        day = intent.getIntExtra("day", -1)
        year = intent.getIntExtra("year", -1)
        month = intent.getIntExtra("month", -1)
        groupId = intent.getStringExtra("groupId") ?: ""
        groupName = intent.getStringExtra("groupName") ?: ""
        val receivedTransitionName = intent.getStringExtra("transitionName") ?: ""
        
        // Î©îÏù∏ Î†àÏù¥ÏïÑÏõÉ ÏÉùÏÑ±
        val layout = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            gravity = Gravity.CENTER
            setBackgroundColor(Color.WHITE)
            setPadding(32, 64, 32, 64)
            
            // Shared Element TransitionÏùÑ ÏúÑÌïú transitionName ÏÑ§Ï†ï
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                transitionName = receivedTransitionName
            }
        }
        
        val topBar = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            gravity = Gravity.CENTER_VERTICAL
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
        }

        val backButton = Button(this).apply {
            text = "‚óÄ"
            textSize = 30f
            setTextColor(Color.BLACK)
            setBackgroundColor(Color.TRANSPARENT)
            setPadding(0, 0, 0, 0)
            minHeight = 0
            minWidth = 0
            setOnClickListener { onBackPressedDispatcher.onBackPressed() }
        }

        val space = android.widget.Space(this)
        space.layoutParams = LinearLayout.LayoutParams(0, 0, 1f)

        val addButton = Button(this).apply {
            text = "+"
            textSize = 30f
            setTextColor(Color.BLACK)
            setBackgroundColor(Color.TRANSPARENT)
            setPadding(0, 0, 0, 0)
            minHeight = 0
            minWidth = 0
            setOnClickListener { addPhoto() }
        }

        topBar.addView(backButton)
        topBar.addView(space)
        topBar.addView(addButton)
        layout.addView(topBar)
        
        // RecyclerView ÏÉùÏÑ±
        val recyclerView = RecyclerView(this).apply {
            layoutManager = LinearLayoutManager(this@DayDetailActivity)
            setBackgroundColor(Color.WHITE)
        }
        layout.addView(recyclerView)
        
        // ActivityResultLauncher Îì±Î°ù (Í∞§Îü¨Î¶¨ÏóêÏÑú ÏÇ¨ÏßÑ ÏÑ†ÌÉù)
        galleryLauncher = registerForActivityResult(
            androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult()
        ) { result ->
            if (result.resultCode == RESULT_OK && result.data != null) {
                val imageUri = result.data!!.data
                if (imageUri != null) {
                    selectedImageUri = imageUri
                    uploadImageToFirebase(imageUri)
                }
            }
        }
        
        // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ìï®Ïàò Ï†ïÏùò
        fun loadPhotos() {
            CoroutineScope(Dispatchers.Main).launch {
                try {
                    val firestore = FirebaseFirestore.getInstance()
                    val dateString = "${year}ÎÖÑ ${month}Ïõî ${day}Ïùº"
                    val snapshot = firestore.collection("groups")
                        .document(groupId)
                        .collection("photos")
                        .whereEqualTo("date", dateString)
                        .orderBy("uploadedAt", com.google.firebase.firestore.Query.Direction.DESCENDING)
                        .get()
                        .await()
                    val photoCount = snapshot.size()
                    val photoList = mutableListOf<PhotoData>()
                    val photoDocIds = mutableListOf<String>()
                    for (document in snapshot.documents) {
                        val imageUrl = document.getString("url") ?: continue
                        val isBase64 = document.getBoolean("isBase64") ?: false
                        val description = document.getString("description") ?: ""
                        val commentsRaw = document.get("comments")
                        val comments: List<Comment> = when (commentsRaw) {
                            is List<*> -> {
                                commentsRaw.map {
                                    when (it) {
                                        is Map<*, *> -> {
                                            val userId = it["userId"]?.toString() ?: "ÏùµÎ™Ö"
                                            val text = it["text"]?.toString() ?: ""
                                            Comment(userId, text)
                                        }
                                        is String -> Comment("ÏùµÎ™Ö", it)
                                        else -> null
                                    }
                                }.filterNotNull()
                            }
                            else -> emptyList()
                        }
                        photoList.add(PhotoData(imageUrl, isBase64, description, comments))
                        photoDocIds.add(document.id)
                    }
                    recyclerView.adapter = PhotoAdapter(
                        dateString = "${groupName}\n${year}ÎÖÑ ${month}Ïõî ${day}Ïùº",
                        photoCount = photoCount,
                        photos = photoList,
                        groupId = groupId,
                        photoDocIds = photoDocIds
                    ) {
                        loadPhotos()
                    }
                    photoAdapter = recyclerView.adapter as PhotoAdapter
                } catch (e: Exception) {
                    recyclerView.adapter = PhotoAdapter(
                        dateString = "${groupName}\n${year}ÎÖÑ ${month}Ïõî ${day}Ïùº",
                        photoCount = 0,
                        photos = emptyList(),
                        groupId = groupId,
                        photoDocIds = emptyList()
                    ) {
                        loadPhotos()
                    }
                    photoAdapter = recyclerView.adapter as PhotoAdapter
                    e.printStackTrace()
                }
            }
        }
        
        // ÏµúÏ¥à Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        if (groupId.isNotEmpty()) {
            loadPhotos()
        }
        
        loadPhotosFunc = { loadPhotos() }
        
        setContentView(layout)
        
        // Shared Element Transition ÏÑ§Ï†ï - ÏÜçÎèÑ Ï°∞Ï†à Î∞è Î∞∞Í≤Ω Ïú†ÏßÄ
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            val transition = android.transition.TransitionInflater.from(this)
                .inflateTransition(android.R.transition.move)
            
            // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏßÄÏÜç ÏãúÍ∞ÑÏùÑ ÎäòÎ†§ÏÑú Îçî Î∂ÄÎìúÎüΩÍ≤å
            transition.duration = 800
            
            window.sharedElementEnterTransition = transition
            
            // Î∞∞Í≤ΩÏù¥ ÏÇ¨ÎùºÏßÄÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ï
            window.allowEnterTransitionOverlap = false
            window.allowReturnTransitionOverlap = false
        }
    }

    // ÏÇ¨ÏßÑ Ï∂îÍ∞Ä Ìï®Ïàò (Í∞§Îü¨Î¶¨ÏóêÏÑú ÏÑ†ÌÉù)
    fun addPhoto() {
        val intent = Intent(Intent.ACTION_PICK).apply {
            type = "image/*"
        }
        galleryLauncher.launch(intent)
    }

    // StorageÏóê ÏóÖÎ°úÎìú ÌõÑ FirestoreÏóê Ï†ÄÏû• ‚Üí Base64Î°ú FirestoreÏóê ÏßÅÏ†ë Ï†ÄÏû•
    private fun uploadImageToFirebase(imageUri: Uri) {
        val context = this
        val dateString = "${year}ÎÖÑ ${month}Ïõî ${day}Ïùº"
        try {
            val inputStream: InputStream? = contentResolver.openInputStream(imageUri)
            if (inputStream == null) {
                android.widget.Toast.makeText(context, "Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§", android.widget.Toast.LENGTH_SHORT).show()
                return
            }
            val bytes = inputStream.readBytes()
            val base64String = Base64.encodeToString(bytes, Base64.DEFAULT)
            val firestore = FirebaseFirestore.getInstance()
            val photoData = hashMapOf(
                "url" to base64String,
                "isBase64" to true,
                "description" to "",
                "comments" to emptyList<String>(),
                "date" to dateString,
                "uploadedAt" to Timestamp.now()
            )
            firestore.collection("groups")
                .document(groupId)
                .collection("photos")
                .add(photoData)
                .addOnSuccessListener {
                    android.widget.Toast.makeText(context, "ÏÇ¨ÏßÑÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§", android.widget.Toast.LENGTH_SHORT).show()
                    setResult(RESULT_OK)
                    loadPhotosFunc()
                }
                .addOnFailureListener { e ->
                    android.widget.Toast.makeText(context, "Firestore Ï†ÄÏû• Ïã§Ìå®: ${e.message}", android.widget.Toast.LENGTH_SHORT).show()
                }
        } catch (e: Exception) {
            android.widget.Toast.makeText(context, "Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨ Ïã§Ìå®: ${e.message}", android.widget.Toast.LENGTH_SHORT).show()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        photoAdapter?.cleanup()
    }
}

// Spotify Track Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§
data class Track(
    val id: String,
    val name: String,
    val artist: String,
    val album: String,
    val previewUrl: String?
)

// Spotify APIÎ°ú ÏùåÏïÖ Í≤ÄÏÉâÌïòÎäî Ìï®Ïàò (ÌïúÍµ≠ ÏùåÏïÖ Ïö∞ÏÑ†, Ïú†Î™ÖÌïú Í≥°Îì§)
private fun searchSpotifyTracks(query: String, accessToken: String): List<Track> {
    return try {
        // ÌïúÍµ≠ ÏùåÏïÖÏúºÎ°ú Í≤ÄÏÉâ Î≤îÏúÑ Ï†úÌïú (Ïû•Î•¥: k-pop, korean, ÌïúÍµ≠Ïñ¥)
        val koreanQuery = "$query korean k-pop"
        val encodedQuery = java.net.URLEncoder.encode(koreanQuery, "UTF-8")
        val url = URL("https://api.spotify.com/v1/search?q=$encodedQuery&type=track&limit=10&market=US")
        
        val connection = url.openConnection() as HttpURLConnection
        connection.requestMethod = "GET"
        connection.setRequestProperty("Authorization", "Bearer $accessToken")
        connection.setRequestProperty("Content-Type", "application/json")
        
        val responseCode = connection.responseCode
        if (responseCode == HttpURLConnection.HTTP_OK) {
            val response = connection.inputStream.bufferedReader().use { it.readText() }
            Log.d("SpotifyDebug", "Spotify API ÏùëÎãµ: $response")
            val jsonObject = JSONObject(response)
            val tracksObject = jsonObject.getJSONObject("tracks")
            val itemsArray = tracksObject.getJSONArray("items")
            
            val tracks = mutableListOf<Track>()
            for (i in 0 until itemsArray.length()) {
                val trackObject = itemsArray.getJSONObject(i)
                val id = trackObject.getString("id")
                val name = trackObject.getString("name")
                val previewUrl = if (trackObject.has("preview_url") && !trackObject.isNull("preview_url")) {
                    trackObject.getString("preview_url")
                } else null
                
                val artist = try {
                    val artistsArray = trackObject.getJSONArray("artists")
                    if (artistsArray.length() > 0) {
                        artistsArray.getJSONObject(0).getString("name")
                    } else {
                        "Unknown Artist"
                    }
                } catch (e: Exception) {
                    "Unknown Artist"
                }
                
                val albumObject = trackObject.getJSONObject("album")
                val album = albumObject.getString("name")
                
                tracks.add(Track(id, name, artist, album, previewUrl))
            }
            
            // Ïù∏Í∏∞ÎèÑ ÏàúÏúºÎ°ú Ï†ïÎ†¨ (Ïú†Î™ÖÌïú Í≥° Ïö∞ÏÑ†)
            tracks.sortedByDescending { track ->
                // Track ÌÅ¥ÎûòÏä§Ïóê popularity ÌïÑÎìúÍ∞Ä ÏóÜÏúºÎØÄÎ°ú Ïù¥Î¶ÑÏúºÎ°ú Ïú†Î™ÖÎèÑ Ï∂îÏ†ï
                val popularKeywords = listOf("Î∞©ÌÉÑÏÜåÎÖÑÎã®", "BTS", "Î∏îÎûôÌïëÌÅ¨", "BLACKPINK", "ÏïÑÏù¥Ïú†", "IU", 
                    "ÏÑ∏Î∏êÌã¥", "SEVENTEEN", "Ìä∏ÏôÄÏù¥Ïä§", "TWICE", "Î†àÎìúÎ≤®Î≤≥", "Red Velvet", "ÏóëÏÜå", "EXO",
                    "Îâ¥ÏßÑÏä§", "NewJeans", "Î•¥ÏÑ∏ÎùºÌïå", "LE SSERAFIM", "ÏïÑÏù¥Î∏å", "IVE", "Ïä§ÌÖåÏù¥Ïî®", "STAYC")
                
                popularKeywords.count { keyword ->
                    track.name.contains(keyword, ignoreCase = true) || 
                    track.artist.contains(keyword, ignoreCase = true)
                }
            }
        } else {
            emptyList()
        }
    } catch (e: Exception) {
        e.printStackTrace()
        emptyList()
    }
}